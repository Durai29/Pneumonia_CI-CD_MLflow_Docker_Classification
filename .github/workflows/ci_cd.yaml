# .github/workflows/ci_cd.yml

name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ========================================================================
  # STAGE 1: CI - Linting and Testing
  # ========================================================================
  ci_checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip' # Cache dependencies for faster builds

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8

      - name: Run Code Linting (Flake8)
        run: |
          flake8 . --max-line-length=120

      - name: Run Unit Tests
        run: |
          pytest e2eMLOpsDSMLFlow/

  # ========================================================================
  # STAGE 2: CD - Train Model and Build/Push Docker Image
  # (Only runs if the CI checks pass)
  # ========================================================================
  train_and_deploy:
    runs-on: ubuntu-latest
    needs: ci_checks # Wait for CI to pass
    
    # Define environment variables for MLflow tracking (if remote is used)
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: pip install -r requirements.txt
        
      # --- Model Training/Evaluation ---
      - name: Run Full MLOps Pipeline (Train/Log to MLflow)
        # This assumes your main.py executes all stages (data $\rightarrow$ train $\rightarrow$ eval)
        run: python main.py 

      # --- Docker Build and Push ---
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Use your Docker username and the commit SHA for the tag
          tags: ${{ secrets.DOCKER_USERNAME }}/pneumonia-classifier:${{ github.sha }}
          # This is an alternative, cleaner tag for latest stable build:
          # tags: ${{ secrets.DOCKER_USERNAME }}/pneumonia-classifier:latest